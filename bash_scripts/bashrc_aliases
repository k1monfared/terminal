#!/bin/bash

# initial setup

## define bashscripts folder address in the ~/.bashrc and then source this file there. e.g.
### bashscripts="/home/$USER/bash_scripts"
### source "$bashscripts/bashrc_aliases"
### export PATH="$PATH:$bashscripts"

## to access this file without looking for it every time
alias aliases_edit="pulsar $bashscripts/bashrc_aliases &"
alias aliases_list="cat $bashscripts/bashrc_aliases"

## load private info
export bashscripts
source $bashscripts/bashrc.private
export audiobooks_folder
export public_notes_folder
export private_notes_folder
export memory_address
export git_username
export drafts_folder

# system

## solving ibus access problem
export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus

## hibernation
alias hib='sudo systemctl hibernate'
alias bat="batcat"

## shortcuts
alias search="sh $bashscripts/duckduckgo.sh"
alias contacts="sh $bashscripts/contacts.sh"
alias mic="sh $bashscripts/record.sh"
alias organize="sh $bashscripts/organize_photos_monthly_this_folder.sh"
alias jnb="jupyter notebook"
alias cb="sh $bashscripts/copy_file_to_clipboard.sh"

# todo.txt
export TODOTXT_DEFAULT_ACTION=ls
export TODOTXT_SORT_COMMAND='env LC_COLLATE=C sort -k 2,2 -k 1,1n'
alias t='/home/$USER/opt/todo.txt_cli-2.12.0/todo.sh'
complete -F _todo t

# apt
alias ins="sudo apt install"
alias upd="sudo apt update"
alias upg="sudo apt upgrade -y"
alias remove="sudo apt remove"

# note
alias note="sh $bashscripts/note.sh"
alias n="sh $bashscripts/quicknote.sh"
alias ln="sh $bashscripts/lastnote.sh"
alias drafts="sh $bashscripts/searchdrafts.sh"
alias notes="sh $bashscripts/search_notes.sh"
pn () # automatically open a public note in the editor
{
    file=$1
    pulsar "$public_notes_folder/$file"
}
pvn () # automatically open a private note in the editor
{
    file=$1
    pulsar "$private_notes_folder/$file"
}

# github
alias git_switch="sh $bashscripts/git_switch.sh"
alias git_who="cat /home/$USER/opt/git_config/active_git_account"
git_init ()
{
    cwd=$(basename "$(pwd)")
    git init &&
    git add --all &&
    git commit -m "Initial commit" &&
    gh repo create "$cwd" --private
    git push --set-upstream origin main
}
git_push_all ()
{
    message=$*
    if [[ $(echo $message) ]]; then
        message=$message
    elsesour
        message="quick commit"
    fi
    git status && git add --all && git commit -m "$message" && git push
    repo_name=$(basename `git rev-parse --show-toplevel`)
    echo "Repository link: https://github.com/$(git config --get remote.origin.url | sed 's/.*://;s/.git$//')"
}
git_activate ()
{
    echo $1 > "/home/$USER/opt/git_config/active_git_account"
}
git_clone ()
{
    # get the active git account name
    #account=$(<"/home/$USER/opt/git_config/active_git_account")
    account=$1
    git_link=$2
    # get everything from the first colon
    sublink=$(echo $git_link |
        sed 's/^[^:]*[:]//')
    # get repo name
    repo=$(echo $sublink |
        sed 's/.*\///')
    repo=${repo%.*}
    git clone git@${account}:$sublink &&
    cd $repo &&
    git_switch $account
}

## github gist
alias gist="sh $bashscripts/gist.sh"
alias gistp="sh $bashscripts/publicgist.sh"
alias gg="sh $bashscripts/quickgist.sh"

# solving ibus access problem
export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus


# libarary
alias libby="$bashscripts/overdrive/overdrive.sh download"
alias libby_list="ls -t /home/$USER/Downloads | grep \.odm\$ > /tmp/libby_list && cat -n /tmp/libby_list"
libby_get ()
{
    book_name=$(sed -n $1p /tmp/libby_list)
    libby "/home/$USER/Downloads/$book_name"
}


# vpn
## proton
alias ppn="protonvpn-cli"


# terminal helpers
## capture the output of a command so it can be retrieved with ret
cap () { tee /tmp/capture.out; }
## return the output of the most recent command that was captured by cap
ret () { cat /tmp/capture.out; }


# passowrds
## bitwarden
alias bw="$HOME/opt/bw"
alias bwc="$bashscripts/bwc"
alias bwu='export BW_SESSION="$(bw unlock --raw)"'
alias bwl='export BW_SESSION='

## enc/dec
enc ()
{
    file=$*
    gpg --output "$file.enc" --symmetric --cipher-algo AES256 "$file"
}

dec ()
{
    file=$*
    gpg --output "$file.dec" --decrypt "$file"
}

## search
print_lines_with_context() {
    local file="$1"
    local line_number="$2"
    local lines_before="${3:-3}"
    local lines_after="${4:-5}"
    local truncate="${5:-true}"
    local start_line=$((line_number - lines_before))
    local end_line=$((line_number + lines_after))

    # Ensure start_line is not less than 1
    if [ "$start_line" -lt 1 ]; then
        start_line=1
    fi

    # Get the absolute path of the file
    local abs_filepath
    abs_filepath=$(realpath "$file")

    # Get terminal width and calculate max line width as 80% of terminal width
    local terminal_width
    terminal_width=$(tput cols)
    local max_line_width=$((terminal_width * 80 / 100))

    # Print lines with line numbers and highlight the selected line
    awk -v start="$start_line" -v end="$end_line" -v highlight="$line_number" -v filepath="$abs_filepath" -v max_width="$max_line_width" -v truncate="$truncate" '
    BEGIN {
        # Print the absolute file path in magenta
        printf "\033[32m%s\033[0m\n", filepath
    }
    NR >= start && NR <= end {
        # Truncate line to max_width if necessary, but only if it is not the selected line
        if (NR == highlight) {
            line = $0
        } else {
            if (truncate == "true") {
                line = (length($0) > max_width) ? substr($0, 1, max_width) "..." : $0
            } else {
                line = $0
            }
        }
        if (NR == highlight) {
            # Highlight the selected line in blue and line number in cyan
            printf "\033[32m%4d:\033[34m %s\033[0m\n", NR, line
        } else {
            # Print line numbers in red
            printf "\033[31m%4d:\033[0m %s\n", NR, line
        }
    }' "$file"
}

search_text() {
    local search_dir="${1:-.}"

    # Find text, log, latex files, and files without extension, prepend each line with its filename and line number
    local selected_line
    selected_line=$(find "$search_dir" -type f \( -iname '*.txt' -o -iname '*.md' -o -iname '*.rst' -o -iname '*.asc' -o -iname '*.tex' -o -iname '*.csv' -o -iname '*.log' -o ! -name '*.*' \) -exec awk '{print FILENAME ":" FNR ":" $0}' {} + | \
    fzf --ansi --delimiter ':' \
        --color fg:242,bg:16,hl:108,fg+:15,bg+:236,hl+:168 \
        --color info:148,prompt:110,spinner:148,pointer:168,marker:168 \
        --preview 'batcat --style=numbers --color=always --highlight-line {2} {1}' \
        --preview-window=right:40%:wrap \
        --with-nth=1,2,3..)

    if [[ -n "$selected_line" ]]; then
        IFS=':' read -r filename lineno _ <<< "$selected_line"
        print_lines_with_context "$filename" "$lineno"
    fi
}

search_notes() {
    OPTIONS=("public" "private" "drafts")
    echo "Select an option:"
    select opt in "${OPTIONS[@]}"; do
        case "$opt" in
            public)
                NOTES_FOLDER="$public_notes_folder"
                break
                ;;
            private)
                NOTES_FOLDER="$private_notes_folder"
                break
                ;;
            drafts)
                NOTES_FOLDER="$drafts_folder"
                break
                ;;
            *)
                echo "Invalid option. Please choose a valid option."
                ;;
        esac
    done
    search_text "$NOTES_FOLDER"
}

alias fz="sh $bashscripts/fz.sh"
